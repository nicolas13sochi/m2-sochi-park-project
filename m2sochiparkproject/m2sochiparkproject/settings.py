'''
Django settings for m2sochiparkproject project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
'''

from pathlib import Path
import os
from datetime import timedelta
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ishe700e^=-4=3$gh1$=p5=p7^5(p*-=&g%daaq@r3_=m_apad'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #'django.contrib.sites', # not used now

    # wagtail
    'wagtail_modeladmin',
    'wagtail.contrib.settings',
    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    # 'wagtail_modeladmin', # extra lib https://pypi.org/project/wagtail-modeladmin/
    'wagtail.admin',
    'wagtail',

    # DRF
    'corsheaders',
    'rest_framework',
    'rest_framework.authtoken',

    # libs
    'formtools',
    'django_recaptcha',
    'phonenumber_field',
    'taggit',
    'widget_tweaks',

    # apps
    'accounts',
    'base',
    'cms',
    'profiles',
    'pages',
    'users',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.gzip.GZipMiddleware',
]

SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ROOT_URLCONF = 'm2sochiparkproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'm2sochiparkproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db_w.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.User'

TOKEN_VALIDITY = {
    'REGISTER': timedelta(minutes=20),
    'AUTH_ACTION': timedelta(minutes=5),
}

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'users.auth_backend.PasswordlessAuthBackend',
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ]
}

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGE_CODE = 'ru-RU'
DATE_FORMAT = 'd E'
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')

STATIC_URL = '/static/'

STATICFILES_DIRS = [

    os.path.join(BASE_DIR, 'm2sochiparkproject/static')

]

# Media files

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Messages

MESSAGE_TAGS = {
    20: 'info',
    25: 'success',
    30: 'warning',
    40: 'danger',
}

WAGTAIL_SITE_NAME = 'CORE PROJECT'

WAGTAILADMIN_BASE_URL = 'http://127.0.0.1:8000'

WAGTAIL_ENABLE_UPDATE_CHECK = False

# Wagtail internationalisation

WAGTAIL_I18N_ENABLED = False

# Wagtail language pack

WAGTAIL_CONTENT_LANGUAGES = LANGUAGES = [
    ('en', 'English'),
    ('ru', 'Russian'),
]

# Image to webp
WAGTAILIMAGES_FORMAT_CONVERSIONS = {
        'bmp': 'webp',
        'webp': 'webp',
        'jpeg': 'webp',
        'jpg': 'webp',
        'png': 'webp',
    }

# Svg support
WAGTAILIMAGES_EXTENSIONS = ['gif', 'jpg', 'jpeg', 'png', 'webp', 'svg']

# email
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' # django.core.mail.backends.smtp.EmailBackend
EMAIL_HOST='localhost'
EMAIL_PORT=25
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_ADMIN = EMAIL_HOST_USER

# CELERY SETTINGS
CELERY_BROKER_URL = '' 
CELERY_RESULT_BACKEND = ''  
CELERY_ACCEPT_CONTENT = []  
CELERY_TASK_SERIALIZER = ''  
CELERY_RESULT_SERIALIZER = ''  
CELERY_TIMEZONE = ''

SEND_SERVICE_EMAIL = False
SEND_SERVICE_SMS = False
SEND_SERVICE_BY_TG = False

SMS_AERO_EMAIL = ''
SMS_AERO_API_KEY = ''
SMS_AERO_SIGN = ''

# Admin separate
ADMIN_PROTECTED_URL = ''

# Telegram API
TG_BOT_TOKEN = None # Telegram bot token
TG_BASE_URL = None # Telegram base url
TG_GROUP_CHAT_ID = None # Telegram chat_id

# Telegram notification Bot
ASYNC_NOTIFICATION_SEND = True # Telegram notification bot name

# reCaptcha
RECAPTCHA_PUBLIC_KEY = ''
RECAPTCHA_PRIVATE_KEY = ''

# Base url
BASE_URL = ''

# Lead service
LEAD_API_KEY = None
LEAD_API_URL = None

# Auth / Reg Token Validity
TOKEN_VALIDITY = {
    'CODE': 5, # delta minutes
    'CODE_ATTEMPTS': 5, # number of attempts
    'RESEND': 2, # delta minutes
    'RESEND_ATTEMPTS': 5, # number of attempts
}

# DRF
REST_FRAMEWORK = {
    'DATE_INPUT_FORMATS': [
        '%d.%m.%Y', '%Y-%m-%d', '%d.%m.%y',  # '25.10.2006', '25.10.2006', '25.10.06'
        '%d-%m-%Y', '%d/%m/%Y', '%d/%m/%y',  # '25-10-2006', '25/10/2006', '25/10/06'
        '%d %b %Y',  # '25 Oct 2006', 
        '%d %B %Y',  # '25 October 2006',
    ],
    'DATETIME_INPUT_FORMATS': [
        '%d.%m.%y %H:%M', '%d.%m.%y %H:%M:%S','%d.%m.%Y %H:%M', '%d.%m.%Y %H:%M:%S','%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M', '%Y-%m-%d', '%m/%d/%Y %H:%M:%S', '%m/%d/%Y %H:%M:%S.%f', '%m/%d/%Y %H:%M', '%m/%d/%Y', '%m/%d/%y %H:%M:%S', '%m/%d/%y %H:%M:%S.%f', '%m/%d/%y %H:%M', '%m/%d/%y'
    ],
    'DATE_FORMAT': '%d.%m.%Y',
    'DATETIME_FORMAT': '%d.%m.%Y %H:%M',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'apiv1.auth.APIKeyAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    # 'DEFAULT_SCHEMA_CLASS':  'rest_framework.schemas.coreapi.AutoSchema'
}


# Session
#SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

# import ENV settings
from m2sochiparkproject.env_settings import *
